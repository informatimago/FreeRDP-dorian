#!/bin/bash

KRB5CONFIG=$(which krb5-config)
if [ ! -x $KRB5CONFIG ]; then
  echo "No krb5-config found in path, please install."
  return 1
fi

display_help(){
  echo; echo "Usage:"
  echo -e "\t-m [--mit-flavour]\t\tuse MIT flavour for Kerberos (used by default)"
  echo -e "\t-H [--heimdal-flavour]\t\tuse Heimdal flavour for Kerberos"
  echo -e "\t-p [--krb-installed-prefix]\tspecify Kerberos installed prefix"
  echo -e "\t-s [--krb-sources-dir]\t\tspecify Kerberos sources directory (used by MIT only)"
  echo -e "\t-h [--help]\t\t\tdisplay this help and exit"; echo
}

if [ $# -le 0 ]; then
  display_help
  return 1
fi

# NOTE: This requires GNU getopt. On Mac OS X and FreeBSD,
# you have to install this separately.
TEMP=`getopt -o mHp:s:h --long mit-flavour,heimdal-flavour,krb-installed-prefix:,krb-sources-dir:,help \
             -n 'pkinit_install' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; return 1 ; fi

eval set -- "$TEMP"

MIT=true
HEIMDAL=false
KRB_INSTALLED_PREFIX=
KRB_SOURCES_DIR=

while true; do
  case "$1" in
    -m | --mit-flavour ) MIT=true; shift;;
    -H | --heimdal-flavour ) HEIMDAL=true; MIT=false; shift;;
    -p | --krb-installed-prefix ) KRB_INSTALLED_PREFIX="$2"; shift 2;;
    -s | --krb-sources-dir ) KRB_SOURCES_DIR="$2"; shift 2;;
    -h | --help ) display_help; return 1;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

echo "KRB_INSTALLED_PREFIX=$KRB_INSTALLED_PREFIX; KRB_SOURCES_DIR=$KRB_SOURCES_DIR"

if [ $MIT = true ]; then
  FLAVOUR=MIT
elif [ $HEIMDAL = true ]; then
  FLAVOUR=Heimdal
else
  FLAVOUR=MIT
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MESSAGE=false
START_PATH=$PATH
FORCE_INSTALL=false

reset_path(){	
  echo "dans reset_path: CURRENT_PATH=$CURRENT_PATH; LAST_ADDED_PATH=$LAST_ADDED_PATH"
  if ! [ $START_PATH = $PATH ]; then
    CURRENT_PATH=$PATH
    LAST_ADDED_PATH=`echo ${CURRENT_PATH%%:*}`
    echo "Incorrect Kerberos path given : $LAST_ADDED_PATH. PATH not changed."
    export PATH=$START_PATH
  fi
}

check_version(){
  if [ $FLAVOUR = "MIT" ]; then
    # Need at least Kerberos V5 1.15.0 due to bugs in older versions of PKINIT
    VERSION=$(($KRB5CONFIG --version) 2>&1)
    NUM_VERSION=$(echo $VERSION | cut -d ' ' -f4)
    MAJOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f1)
    MINOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f2)

    if [ "$MAJOR_VERSION" -lt 1 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
      return 1
    fi

    if [ "$MINOR_VERSION" -lt 15 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
      return 1
    fi
  else
    # Need at least Heimdal Kerberos 7.3.0 (not tested below)
    VERSION=$(($KRB5CONFIG --version) 2>&1)
    NUM_VERSION=$(echo $VERSION | cut -d ' ' -f2)
    MAJOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f1)
    MINOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f2)
    PATCH_VERSION=$(echo $NUM_VERSION | cut -d '.' -f3)

    if [ "$MAJOR_VERSION" -lt 7 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
      return 1
    fi

    if [ "$MINOR_VERSION" -lt 3 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
      return 1
    fi

    if [ "$PATCH_VERSION" -lt 0 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
      return 1
    fi
  fi
  return 0
}

retval=0
KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
if [[ $KRB5VENDOR =~ [H|h]eimdal$ && $FLAVOUR = "MIT" ]]; then
	echo "on est la"
  if [[ $KRB5VENDOR = "Massachusetts Institute of Technology" && $FLAVOUR = "Heimdal" ]]; then
    echo "pas besoin de checker la version: KRB5VENDOR=$KRB5VENDOR; FLAVOUR=$FLAVOUR"
  else
    if [[ $KRB5VENDOR =~ [H|h]eimdal$ && $FLAVOUR = "MIT" ]]; then
      echo "coucou"
    else
      echo "on check par la"
      check_version
      retval=$?
    fi
  fi
else
  if [[ $KRB5VENDOR = "Massachusetts Institute of Technology" && $FLAVOUR = "Heimdal" ]]; then
   echo  "on passe par ci et la"
  else
    echo "on check par ici"
    check_version
    retval=$?
  fi
fi

if [ $retval = 1 ]; then
  echo "check version nok: force install: retval=$retval"
  FORCE_INSTALL=true
else
  echo "check version ok: not force install: retval=$retval"
  FORCE_INSTALL=false
fi 

if [ $FORCE_INSTALL = true ]; then
  echo "force est true"
else
  echo "force est false"
fi

echo "apres premier check version : FORCE_INSTALL=$FORCE_INSTALL"

# set PATH according to Kerberos flavour we choose to use,
# i.e MIT or Heimdal.
if [ $FLAVOUR = "MIT" ]; then
  source $DIR/setkerberospath $FLAVOUR $KRB_SOURCES_DIR $KRB_INSTALLED_PREFIX
else
  source $DIR/setkerberospath $FLAVOUR $KRB_INSTALLED_PREFIX
fi

KRB5CONFIG=$(which krb5-config)
KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
if ! [[ $KRB5VENDOR =~ [H|h]eimdal$ && $FLAVOUR = "Heimdal" ]]; then
  if ! [[ $KRB5VENDOR = "Massachusetts Institute of Technology" && $FLAVOUR = "MIT" ]]; then
    echo "on passe la: KRB5VENDOR=$KRB5VENDOR; FLAVOUR=$FLAVOUR"
    reset_path
    return 1
  fi
fi

check_version
retval=$?
if [ $retval == 1 ]; then
  echo "retval egal un: reset_path"
  reset_path
  return 1
else
  echo "retval egal zero: reset_path"
fi 

if [ $MESSAGE = false ]; then
  if [[ $KRB5VENDOR =~ [H|h]eimdal$ ]]; then
    echo "Heimdal has been set as Kerberos flavour"
  elif [[ $KRB5VENDOR = "Massachusetts Institute of Technology" ]]; then
    echo "MIT has been set as Kerberos flavour"
  fi
fi

# Add krb5support lib flag to krb5-config file
KRB5PREFIX=$(($KRB5CONFIG --prefix) 2>&1)

if [ $FLAVOUR = "MIT" ]; then
  touch /tmp/krb5-config
  chmod 755 /tmp/krb5-config
  sed s/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\"/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\ \-lkrb5support\"/g $KRB5PREFIX/bin/krb5-config > /tmp/krb5-config
  sudo mv /tmp/krb5-config $KRB5PREFIX/bin/krb5-config
  if [ $? -ne 0 ]; then
    echo "Failed to add krb5support flag to krb5-config file"
    return 1
  else
    echo "Added krb5support flag to krb5-config file"
  fi
fi

# set env var GSS_ROOT_DIR to be able to detect Kerberos flavour (MIT or Heimdal) in FindGSSAPI.cmake
GSS_ROOT_DIR=$(($KRB5CONFIG --prefix) 2>&1)
export GSS_ROOT_DIR=$GSS_ROOT_DIR
KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
[[ $KRB5VENDOR =~ [H|h]eimdal$ ]] \
  && export GSS_ROOT_FLAVOUR=Heimdal \
  || export GSS_ROOT_FLAVOUR=MIT

# set env var PKG_CONFIG_PATH to allow pkg-config to work correctly to link Kerberos libraries
export PKG_CONFIG_PATH=$GSS_ROOT_DIR/lib/pkgconfig

# Copy source files in install directory
if [ $FLAVOUR = "MIT" ]; then
  DESTINATION=$KRB5PREFIX/include/pkinit
  sudo mkdir -p $DESTINATION
  if [[ $KRB_SOURCES_DIR = "" ]]; then
    echo "Please specify Kerberos MIT sources directory [-s|--krb-sources-dir]"
    return 1
  fi
  find $KRB_SOURCES_DIR \( -name 'k5-platform.h' -o -name 'k5-json.h' -o -name 'k5-thread.h' -o -name 'autoconf.h' \) -print -exec sudo cp {} $DESTINATION \;
  if [ $? -ne 0 ]; then
    echo "Script failed to copy all files in $DESTINATION"
    return 1
  fi
  echo "All files have been copied successfully in $DESTINATION"
fi
