#!/bin/bash

KRB5CONFIG=$(which krb5-config)
echo KRB5CONFIG=$KRB5CONFIG
if [ ! -x $KRB5CONFIG ]; then
  echo "No krb5-config found in path, please install."
  return 1
fi

#stringZ=abcABC123ABCabc
#       |------|
#       12345678
#echo `expr match "$stringZ" 'abc[A-Z]*.2'`

# Need at least Kerberos V5 1.15.0 due to bugs in PKINIT older versions
STR_VERSION=$(($KRB5CONFIG --version) 2>&1)
VERSION=$(echo $STR_VERSION | cut -d ' ' -f1-4)
NUM_VERSION=$(echo $VERSION | cut -d ' ' -f4)
MAJOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f1)
MINOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f2)

#if [ "$MAJOR_VERSION" -lt "1" ]; then
 # echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
  #return 1
#fi

#if [ "$MINOR_VERSION" -lt "15" ]; then
 # echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
  #return 1
#fi

if [ $# -le 0 ]; then
  echo "Usage:"
  echo -e "\t$0 <Kerberos source files directory>"
  return 1
fi

# Add krb5support lib flag to krb5-config file
KRB5PREFIX=$(($KRB5CONFIG --prefix) 2>&1)
echo KRB5PREFIX=$KRB5PREFIX
touch /tmp/krb5-config
chmod 755 /tmp/krb5-config
sed s/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\"/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\ \-lkrb5support\"/g $KRB5PREFIX/bin/krb5-config > /tmp/krb5-config
sudo mv /tmp/krb5-config $KRB5PREFIX/bin/krb5-config
if [ $? -ne 0 ]; then
  echo "Failed to add krb5support flag to krb5-config file"
  return 1
else
  echo "Added krb5support flag to krb5-config file"
fi

# set env var GSS_ROOT_DIR to be able to detect Kerberos flavour (MIT or Heimdal) in FindGSSAPI.cmake
GSS_ROOT_DIR=$(($KRB5CONFIG --prefix) 2>&1)
export GSS_ROOT_DIR=$GSS_ROOT_DIR
#export GSS_ROOT_DIR=/usr/local/heimdal
echo "GSS_ROOT_DIR=$GSS_ROOT_DIR"

# Copy source files in install directory
SOURCES=$1
DESTINATION=$KRB5PREFIX/include/pkinit
sudo mkdir -p $DESTINATION
find $SOURCES \( -name 'k5-platform.h' -o -name 'k5-json.h' -o -name 'k5-thread.h' -o -name 'autoconf.h' \) -print -exec sudo cp {} $DESTINATION \;
if [ $? -ne 0 ]; then
  echo "Script failed to copy all files in $DESTINATION"
  return 1
fi

echo "All files have been copied with success in $DESTINATION"
