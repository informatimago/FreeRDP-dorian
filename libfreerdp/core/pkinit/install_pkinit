#!/bin/bash

KRB5CONFIG=$(which krb5-config)
echo KRB5CONFIG=$KRB5CONFIG
if [ ! -x $KRB5CONFIG ]; then
  echo "No krb5-config found in path, please install."
  return 1
fi

echo arg nb=$#
echo "\$0=$0"
echo "\$1=$1"
echo "\$2=$2"
echo "\$3=$3"
echo "\$4=$4"
echo "\$5=$5"

display_help(){
  echo; echo "Usage:"
  echo -e "\t-m [--mit-flavour]\tuse MIT flavour for Kerberos" 
  echo -e "\t-H [--heimdal-flavour]\tuse Heimdal flavour for Kerberos"
  echo -e "\t-i [--krb-installed-dir]\tspecify Kerberos installed directory" 
  echo -e "\t-s [--krb-sources-dir]\tspecify Kerberos sources directory"
  echo -e "\t-h [--help]\t\tdisplay this help and exit"; echo
}

if [ $# -le 0 ]; then
  display_help
fi

# NOTE: This requires GNU getopt. On Mac OS X and FreeBSD, 
# you have to install this separately.
TEMP=`getopt -o mHi:s:h --long mit-flavour,heimdal-flavour,krb-install-dir:,krb-sources-dir:,help \
             -n 'pkinit_install' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; return 1 ; fi

eval set -- "$TEMP"

MIT=true
HEIMDAL=false
KRB_INSTALLED_DIR=
KRB_SOURCES_DIR=

while true; do
  case "$1" in
    -m | --mit-flavour ) MIT=true; shift;;
    -H | --heimdal-flavour ) HEIMDAL=true; MIT=false; shift;;
    -i | --krb-installed-dir ) KRB_INSTALLED_DIR="$2"; shift 2;;
    -s | --krb-sources-dir ) KRB_SOURCES_DIR="$2"; shift 2;;
    -h | --help ) display_help; return 1;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

echo "MIT=$MIT; HEIMDAL=$HEIMDAL; KRB_INSTALLED_DIR=$KRB_INSTALLED_DIR; KRB_SOURCES_DIR=$KRB_SOURCES_DIR"

if [ $MIT = true ]; then
  FLAVOUR=MIT
  echo "MIT chosen"
elif [ $HEIMDAL = true ]; then
  FLAVOUR=Heimdal
  echo "Heimdal chosen" 
  echo FLAVOUR=$FLAVOUR 
else
  FLAVOUR=MIT
  echo "MIT by default"
  echo FLAVOUR=$FLAVOUR
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo DIR=$DIR 

echo BASH_SOURCE=$BASH_SOURCE
START_PATH=$PATH
echo START_PATH=$PATH

# set PATH according to Kerberos flavour we choose to use,
# i.e MIT or Heimdal.
echo "setkerberos path MIT : FLAVOUR=$FLAVOUR ; KRB_SOURCES_DIR=$KRB_SOURCES_DIR ; KRB_INSTALLED_DIR=$KRB_INSTALLED_DIR"
if [ $FLAVOUR = "MIT" ]; then
  source $DIR/setkerberospath $FLAVOUR $KRB_SOURCES_DIR $KRB_INSTALLED_DIR
else
  source $DIR/setkerberospath $FLAVOUR $KRB_INSTALLED_DIR
fi

echo PATH APRES ICI=$PATH
echo NEW FLAVOUR=$FLAVOUR 

reset_path(){
  if ! [ $START_PATH = $PATH ]; then 
    CURRENT_PATH=$PATH
    echo CURRENT_PATH avant=$CURRENT_PATH
    LAST_ADDED_PATH=`echo ${CURRENT_PATH%%:*}`
    echo "Incorrect Kerberos path given : $LAST_ADDED_PATH. PATH not changed."
    export PATH=$START_PATH
  fi
}

KRB5CONFIG=$(which krb5-config)
echo KRB5CONFIG ICI=$KRB5CONFIG

KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
if ! [[ $KRB5VENDOR =~ [H|h]eimdal$ && $FLAVOUR = "Heimdal" ]]; then
  if ! [[ $KRB5VENDOR = "Massachusetts Institute of Technology" && $FLAVOUR = "MIT" ]]; then
    reset_path
    return 1
  fi   
fi

echo "apres test reset path : PATH=$PATH"

if [ $FLAVOUR = "MIT" ]; then
  # Need at least Kerberos V5 1.15.0 due to bugs in older versions of PKINIT
  VERSION=$(($KRB5CONFIG --version) 2>&1)
  echo VERSION=$VERSION
  NUM_VERSION=$(echo $VERSION | cut -d ' ' -f4)
  echo NUM_VERSION=$NUM_VERSION
  MAJOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f1)
  echo MAJOR_VERSION=$MAJOR_VERSION
  MINOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f2)
  echo MINOR_VERSION=$MINOR_VERSION

  if [ "$MAJOR_VERSION" -lt 1 ]; then
    echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
    reset_path
    return 1
  fi

  if [ "$MINOR_VERSION" -lt 15 ]; then
    echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
    reset_path
    return 1
  fi
else
  # Need at least Heimdal Kerberos 7.3.0 (not tested below)
  VERSION=$(($KRB5CONFIG --version) 2>&1)
  echo VERSION_Heimdal=$VERSION
  NUM_VERSION=$(echo $VERSION | cut -d ' ' -f2)
  echo NUM_VERSION=$NUM_VERSION
  MAJOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f1)
  echo MAJOR_VERSION=$MAJOR_VERSION
  MINOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f2)
  echo MINOR_VERSION=$MINOR_VERSION
  PATCH_VERSION=$(echo $NUM_VERSION | cut -d '.' -f3)
  echo PATCH_VERSION=$PATCH_VERSION

  if [ "$MAJOR_VERSION" -lt 7 ]; then
    echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
    reset_path
    return 1
  fi

  if [ "$MINOR_VERSION" -lt 3 ]; then
    echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
    reset_path
    return 1
  fi

  if [ "$PATCH_VERSION" -lt 0 ]; then
    echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
    reset_path
    return 1
  fi
fi 

# Add krb5support lib flag to krb5-config file
KRB5PREFIX=$(($KRB5CONFIG --prefix) 2>&1)
echo KRB5PREFIX avant copie fichiers=$KRB5PREFIX

if [ $FLAVOUR = "MIT" ]; then
  touch /tmp/krb5-config
  chmod 755 /tmp/krb5-config
  sed s/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\"/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\ \-lkrb5support\"/g $KRB5PREFIX/bin/krb5-config > /tmp/krb5-config
  sudo mv /tmp/krb5-config $KRB5PREFIX/bin/krb5-config
  if [ $? -ne 0 ]; then
    echo "Failed to add krb5support flag to krb5-config file"
    return 1
  else
    echo "Added krb5support flag to krb5-config file"
  fi
fi

# set env var GSS_ROOT_DIR to be able to detect Kerberos flavour (MIT or Heimdal) in FindGSSAPI.cmake
GSS_ROOT_DIR=$(($KRB5CONFIG --prefix) 2>&1)
export GSS_ROOT_DIR=$GSS_ROOT_DIR
KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
[[ $KRB5VENDOR =~ [H|h]eimdal$ ]] \
  && export GSS_ROOT_FLAVOUR=Heimdal \
  || export GSS_ROOT_FLAVOUR=MIT

echo "GSS_ROOT_DIR=$GSS_ROOT_DIR"
echo "GSS_ROOT_FLAVOUR=$GSS_ROOT_FLAVOUR"

# set env var PKG_CONFIG_PATH to allow pkg-config to work correctly to link Kerberos libraries
export PKG_CONFIG_PATH=$GSS_ROOT_DIR/lib/pkgconfig
echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH

# Copy source files in install directory
DESTINATION=$KRB5PREFIX/include/pkinit
sudo mkdir -p $DESTINATION

if [ $FLAVOUR = "MIT" ]; then
  echo KRB_SOURCES_DIR=$KRB_SOURCES_DIR
  if [[ $KRB_SOURCES_DIR = "" ]]; then
    echo "Please specify Kerberos MIT sources directory [-s|--krb-sources-dir]"
    return 1
  fi
  find $KRB_SOURCES_DIR \( -name 'k5-platform.h' -o -name 'k5-json.h' -o -name 'k5-thread.h' -o -name 'autoconf.h' \) -print -exec sudo cp {} $DESTINATION \;
  if [ $? -ne 0 ]; then
    echo "Script failed to copy all files in $DESTINATION"
    return 1
  fi
  echo "All files have been copied successfully in $DESTINATION"
fi
