#!/bin/bash

KRB5CONFIG=$(which krb5-config)
if [ ! -x $KRB5CONFIG ]; then
  echo "No krb5-config found in path, please install."
  return 1
fi

display_help(){
  echo; echo "Usage:"
  echo -e "\t-m [--mit-flavour]\t\tuse MIT flavour for Kerberos (used by default)"
  echo -e "\t-H [--heimdal-flavour]\t\tuse Heimdal flavour for Kerberos"
  echo -e "\t-p [--krb-prefix]\tspecify Kerberos prefix"
  echo -e "\t-s [--krb-sources-dir]\t\tspecify Kerberos sources directory (used by MIT only)"
  echo -e "\t-h [--help]\t\t\tdisplay this help and exit"; echo
}

if [ $# -le 0 ]; then
  display_help
  return 1
fi

# NOTE: This requires GNU getopt. On Mac OS X and FreeBSD,
# you have to install this separately.
TEMP=`getopt -o mHp:s:h --long mit-flavour,heimdal-flavour,krb-prefix:,krb-sources-dir:,help \
             -n 'install_pkinit' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; return 1 ; fi

eval set -- "$TEMP"

MIT=true
HEIMDAL=false
if [ $BUILD_WITH_PKINIT = "false" ] || [[ $BUILD_WITH_PKINIT = "" ]]; then
  KRB_PREFIX=
  KRB_SOURCES_DIR=
  echo "build without pkinit: BUILD_WITH_PKINIT=$BUILD_WITH_PKINIT; KRB_PREFIX=$KRB_PREFIX; KRB_SOURCES_DIR=$KRB_SOURCES_DIR"
else
  echo "build with pkinit: BUILD_WITH_PKINIT=$BUILD_WITH_PKINIT; KRB_PREFIX=$KRB_PREFIX; KRB_SOURCES_DIR=$KRB_SOURCES_DIR"
fi

while true; do
  case "$1" in
    -m | --mit-flavour ) MIT=true; shift;;
    -H | --heimdal-flavour ) HEIMDAL=true; MIT=false; shift;;
    -p | --krb-prefix ) KRB_PREFIX="$2"; shift 2;;
    -s | --krb-sources-dir ) KRB_SOURCES_DIR="$2"; shift 2;;
    -h | --help ) display_help; return 1;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ "$MIT" = "true" ]; then
  FLAVOUR=MIT
  if [[ $KRB_SOURCES_DIR = "" ]]; then
    echo "Please specify MIT Kerberos sources directory [-s|--krb-sources-dir]"
    return 1
  fi
elif [ "$HEIMDAL" = "true" ]; then
  FLAVOUR=Heimdal
else
  FLAVOUR=MIT
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MESSAGE="false"
START_PATH=$PATH
FORCE_INSTALL="false"
TEST_CONFIG=0
CONFIG_FAILED="false"
NEW_KRB_PREFIX=""
CHECK_VERSION="true"
RETVAL=0
COUNT_FILES=0

reset_path(){	
  if ! [ "$START_PATH" = "$PATH" ]; then
    CURRENT_PATH=$PATH
    LAST_ADDED_PATH=`echo ${CURRENT_PATH%%:*}`
    echo "Incorrect Kerberos path given : $LAST_ADDED_PATH. PATH not changed."
    FORCE_INSTALL="true"
    export PATH=$START_PATH
  fi
}

check_version(){
  if [ "$FLAVOUR" = "MIT" ]; then
    # Need at least 'Kerberos 5 release 1.15' due to bugs in older versions of PKINIT
    VERSION=$(($KRB5CONFIG --version) 2>&1)
    if [[ $VERSION =~ [H|h]eimdal ]]; then
      echo "Bad MIT Kerberos prefix given"
      return 1
    fi
    NUM_VERSION=$(echo $VERSION | cut -d ' ' -f4)
    MAJOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f1)
    MINOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f2)

    if [ "$MAJOR_VERSION" -lt 1 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
      return 1
    fi

    if [ "$MINOR_VERSION" -lt 15 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 1.15"
      return 1
    fi
  else
    # Need at least 'heimdal 7.3.0' (not tested below)
    VERSION=$(($KRB5CONFIG --version) 2>&1)
    if [[ $VERSION =~ Kerberos ]]; then
      echo "Bad Heimdal Kerberos prefix given"
      return 1
    fi
    NUM_VERSION=$(echo $VERSION | cut -d ' ' -f2)
    MAJOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f1)
    MINOR_VERSION=$(echo $NUM_VERSION | cut -d '.' -f2)
    PATCH_VERSION=$(echo $NUM_VERSION | cut -d '.' -f3)

    if [ "$MAJOR_VERSION" -lt 7 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
      return 1
    fi

    if [ "$MINOR_VERSION" -lt 3 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
      return 1
    fi

    if [ "$PATCH_VERSION" -lt 0 ]; then
      echo "Your version of kerberos($VERSION) is too old, need at least 7.3.0"
      return 1
    fi
  fi
  return 0
}

test_config(){
  KRB5CONFIG=$(echo `which krb5-config`)
  KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
  if [[ $KRB5VENDOR =~ [H|h]eimdal$ && $FLAVOUR = "Heimdal" ]] ||
     [[ $KRB5VENDOR = "Massachusetts Institute of Technology" && $FLAVOUR = "MIT" ]]; then
      return 0
  fi
  return 1
}

while true
do
  KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
  if [[ $NEW_KRB_PREFIX = "" ]] &&
     ! [[ $KRB5VENDOR =~ [H|h]eimdal$ && $FLAVOUR = "MIT" ]] &&
     ! [[ $KRB5VENDOR = "Massachusetts Institute of Technology" && $FLAVOUR = "Heimdal" ]]; then
    check_version
    RETVAL=$?
    if [ "$RETVAL" -eq 0 ]; then
      if [[ $KRB_PREFIX = "" ]]; then
        if [[ $KRB5VENDOR =~ [H|h]eimdal$ ]]; then
          echo "Heimdal is already being set as Kerberos flavour"
        elif [[ $KRB5VENDOR = "Massachusetts Institute of Technology" ]]; then
          echo "MIT is already being set as Kerberos flavour"
        fi
        break;
      else
        FORCE_INSTALL="true"
      fi
    else
      CHECK_VERSION="false"
      if ! [[ $NEW_KRB_PREFIX = "" ]]; then
        KRB_PREFIX=$NEW_KRB_PREFIX
      fi
    fi
  fi
   
  if ! [[ $NEW_KRB_PREFIX = "" ]]; then
    KRB_PREFIX=$NEW_KRB_PREFIX
  fi

  # set PATH according to Kerberos flavour we choose to use,
  # i.e MIT or Heimdal.
  if [[ $KRB_PREFIX = "" ]]; then
    if [ "$FLAVOUR" = "MIT" ]; then
      source $DIR/setkerberospath $FLAVOUR $KRB_SOURCES_DIR $KRB_PREFIX
    else
      if [[ $NEW_KRB_PREFIX = "" ]]; then
        source $DIR/setkerberospath $FLAVOUR $KRB_PREFIX
      else
        source $DIR/setkerberospath $FLAVOUR $NEW_KRB_PREFIX
      fi
    fi
  else
    if [ "$FLAVOUR" = "MIT" ]; then
      if [[ $NEW_KRB_PREFIX = "" ]]; then
        source $DIR/setkerberospath $FLAVOUR $KRB_SOURCES_DIR $KRB_PREFIX
      else
        source $DIR/setkerberospath $FLAVOUR $KRB_SOURCES_DIR $NEW_KRB_PREFIX
      fi
    else
      if [[ $NEW_KRB_PREFIX = "" ]]; then
        source $DIR/setkerberospath $FLAVOUR $KRB_PREFIX
      else
        source $DIR/setkerberospath $FLAVOUR $NEW_KRB_PREFIX
      fi
    fi
  fi

  let "TEST_CONFIG++"

  test_config
  RETVAL_TEST=$?
  if [ "$RETVAL_TEST" = 0 ]; then
    check_version
    RETVAL_CHECK=$?
    if [ "$RETVAL_CHECK" = 1 ]; then
      CHECK_VERSION="false"
    fi
  fi
  if [ "$RETVAL_TEST" = 1 ] || [ "$RETVAL_CHECK" = 1 ]; then
    ANSWER=y
    echo "Configuration test failed $TEST_CONFIG time(s). Abort ? [Y/n]"
    read ANSWER
    if [[ $ANSWER =~ [Y|y] ]] || [[ $ANSWER =~ [Y|y]es ]] || [[ $ANSWER = "" ]]; then
      CONFIG_FAILED="true"
      reset_path
      break;
    else
      reset_path
      FORCE_INSTALL="true"
      NEW_KRB_PREFIX=
      ANSWER=no
      while ! [[ $ANSWER =~ [Y|y] ]] && ! [[ $ANSWER =~ [Y|y]es ]] && ! [[ $ANSWER = "" ]]
      do
        read -p "Please specify prefix directory of your $FLAVOUR installation : " NEW_KRB_PREFIX
        if ! [ -d "$NEW_KRB_PREFIX" ]; then
          echo "The directory $NEW_KRB_PREFIX does not exist. Try another one."
          continue
        fi
        echo "You entered : $NEW_KRB_PREFIX. OK ? [Y/n]"
        read ANSWER
      done
      continue;
    fi
  else
    if [ "$MESSAGE" = "false" ]; then
      if [[ $KRB5VENDOR =~ [H|h]eimdal$ ]]; then
        echo "Heimdal has been set as Kerberos flavour"
      elif [[ $KRB5VENDOR = "Massachusetts Institute of Technology" ]]; then
        echo "MIT has been set as Kerberos flavour"
      fi
    fi
    break;
  fi
done

if [ "$CONFIG_FAILED" = "true" ]; then
 echo "Kerberos configuration aborted. Path reset."
 reset_path
 return 1
fi

# Add krb5support lib flag to krb5-config file
KRB5PREFIX=$(($KRB5CONFIG --prefix) 2>&1)

if [ "$FLAVOUR" = "MIT" ]; then
  touch /tmp/krb5-config
  chmod 755 /tmp/krb5-config
  sed s/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\"/lib_flags\=\"\$lib_flags\ \-lkrb5\ \-lk5crypto\ \-lcom_err\ \-lkrb5support\"/g $KRB5PREFIX/bin/krb5-config > /tmp/krb5-config
  sudo mv /tmp/krb5-config $KRB5PREFIX/bin/krb5-config
  if [ $? -ne 0 ]; then
    echo "Failed to add krb5support flag to krb5-config file"
    return 1
  else
    echo "Added krb5support flag to krb5-config file"
  fi
fi

# set env var GSS_ROOT_DIR to be able to detect Kerberos flavour (MIT or Heimdal) in FindGSSAPI.cmake
GSS_ROOT_DIR=$(($KRB5CONFIG --prefix) 2>&1)
export GSS_ROOT_DIR=$GSS_ROOT_DIR
KRB5VENDOR=$(($KRB5CONFIG --vendor) 2>&1)
[[ $KRB5VENDOR =~ [H|h]eimdal$ ]] \
  && export GSS_ROOT_FLAVOUR=Heimdal \
  || export GSS_ROOT_FLAVOUR=MIT

# set env var PKG_CONFIG_PATH to allow pkg-config to work correctly to link Kerberos libraries
export PKG_CONFIG_PATH=$GSS_ROOT_DIR/lib/pkgconfig

# Copy source files in install directory
if [ $FLAVOUR = "MIT" ]; then
  DESTINATION=$KRB5PREFIX/include/pkinit
  sudo mkdir -p $DESTINATION
  if [[ $KRB_SOURCES_DIR = "" ]]; then
    echo "Please specify Kerberos MIT sources directory [-s|--krb-sources-dir]"
    return 1
  fi

  COUNT_FILES=$(echo `find $KRB_SOURCES_DIR \( -name 'k5-platform.h' -o -name 'k5-json.h' -o -name 'k5-thread.h' -o -name 'autoconf.h' \) -print | wc -l`)
  if [ $COUNT_FILES -ne 4 ]; then
    echo "Script failed to find files needed in $KRB_SOURCES_DIR"
    return 1
  fi

  find $KRB_SOURCES_DIR \( -name 'k5-platform.h' -o -name 'k5-json.h' -o -name 'k5-thread.h' -o -name 'autoconf.h' \) -print -exec sudo cp -v {} $DESTINATION \;
  if [ $? -ne 0 ]; then
    echo "Script failed to copy all files in $DESTINATION"
    return 1
  fi
  echo "All files have been copied successfully in $DESTINATION"
fi
